{"version":3,"file":"message_outputs.js","names":["data: Anthropic.Messages.RawMessageStreamEvent","fields: {\n    streamUsage: boolean;\n    coerceContentToString: boolean;\n  }","filteredAdditionalKwargs: Record<string, any>","usageMetadata: UsageMetadata","toolCallChunks: ToolCallChunk[]","contentBlock: Record<string, any>","messages: AnthropicMessageResponse[]","additionalKwargs: Record<string, unknown>","usage: Record<string, number> | null | undefined","generations: ChatGeneration[]"],"sources":["../../src/utils/message_outputs.ts"],"sourcesContent":["/**\n * This util file contains functions for converting Anthropic messages to LangChain messages.\n */\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport {\n  AIMessage,\n  AIMessageChunk,\n  UsageMetadata,\n} from \"@langchain/core/messages\";\nimport type { ToolCallChunk } from \"@langchain/core/messages/tool\";\nimport { ChatGeneration } from \"@langchain/core/outputs\";\nimport { AnthropicMessageResponse } from \"../types.js\";\nimport { extractToolCalls } from \"../output_parsers.js\";\n\nexport function _makeMessageChunkFromAnthropicEvent(\n  data: Anthropic.Messages.RawMessageStreamEvent,\n  fields: {\n    streamUsage: boolean;\n    coerceContentToString: boolean;\n  }\n): {\n  chunk: AIMessageChunk;\n} | null {\n  const response_metadata = { model_provider: \"anthropic\" };\n  if (data.type === \"message_start\") {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { content, usage, ...additionalKwargs } = data.message;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredAdditionalKwargs: Record<string, any> = {};\n    for (const [key, value] of Object.entries(additionalKwargs)) {\n      if (value !== undefined && value !== null) {\n        filteredAdditionalKwargs[key] = value;\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const { input_tokens, output_tokens, ...rest }: Record<string, any> =\n      usage ?? {};\n    const usageMetadata: UsageMetadata = {\n      input_tokens,\n      output_tokens,\n      total_tokens: input_tokens + output_tokens,\n      input_token_details: {\n        cache_creation: rest.cache_creation_input_tokens,\n        cache_read: rest.cache_read_input_tokens,\n      },\n    };\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString ? \"\" : [],\n        additional_kwargs: filteredAdditionalKwargs,\n        usage_metadata: fields.streamUsage ? usageMetadata : undefined,\n        response_metadata: {\n          ...response_metadata,\n          usage: {\n            ...rest,\n          },\n        },\n        id: data.message.id,\n      }),\n    };\n  } else if (data.type === \"message_delta\") {\n    const usageMetadata: UsageMetadata = {\n      input_tokens: 0,\n      output_tokens: data.usage.output_tokens,\n      total_tokens: data.usage.output_tokens,\n      input_token_details: {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        cache_creation: (data.usage as any).cache_creation_input_tokens,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        cache_read: (data.usage as any).cache_read_input_tokens,\n      },\n    };\n    const responseMetadata =\n      \"context_management\" in data.delta\n        ? { context_management: data.delta.context_management }\n        : undefined;\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString ? \"\" : [],\n        response_metadata: responseMetadata,\n        additional_kwargs: { ...data.delta },\n        usage_metadata: fields.streamUsage ? usageMetadata : undefined,\n      }),\n    };\n  } else if (\n    data.type === \"content_block_start\" &&\n    [\n      \"tool_use\",\n      \"document\",\n      \"server_tool_use\",\n      \"web_search_tool_result\",\n    ].includes(data.content_block.type)\n  ) {\n    const contentBlock = data.content_block;\n    let toolCallChunks: ToolCallChunk[];\n    if (contentBlock.type === \"tool_use\") {\n      toolCallChunks = [\n        {\n          id: contentBlock.id,\n          index: data.index,\n          name: contentBlock.name,\n          args: \"\",\n        },\n      ];\n    } else {\n      toolCallChunks = [];\n    }\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString\n          ? \"\"\n          : [\n              {\n                index: data.index,\n                ...data.content_block,\n                input:\n                  contentBlock.type === \"server_tool_use\" ||\n                  contentBlock.type === \"tool_use\"\n                    ? \"\"\n                    : undefined,\n              },\n            ],\n        response_metadata,\n        additional_kwargs: {},\n        tool_call_chunks: toolCallChunks,\n      }),\n    };\n  } else if (\n    data.type === \"content_block_delta\" &&\n    [\n      \"text_delta\",\n      \"citations_delta\",\n      \"thinking_delta\",\n      \"signature_delta\",\n    ].includes(data.delta.type)\n  ) {\n    if (fields.coerceContentToString && \"text\" in data.delta) {\n      return {\n        chunk: new AIMessageChunk({\n          content: data.delta.text,\n        }),\n      };\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const contentBlock: Record<string, any> = data.delta;\n      if (\"citation\" in contentBlock) {\n        contentBlock.citations = [contentBlock.citation];\n        delete contentBlock.citation;\n      }\n      if (\n        contentBlock.type === \"thinking_delta\" ||\n        contentBlock.type === \"signature_delta\"\n      ) {\n        return {\n          chunk: new AIMessageChunk({\n            content: [{ index: data.index, ...contentBlock, type: \"thinking\" }],\n            response_metadata,\n          }),\n        };\n      }\n\n      return {\n        chunk: new AIMessageChunk({\n          content: [{ index: data.index, ...contentBlock, type: \"text\" }],\n          response_metadata,\n        }),\n      };\n    }\n  } else if (\n    data.type === \"content_block_delta\" &&\n    data.delta.type === \"input_json_delta\"\n  ) {\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString\n          ? \"\"\n          : [\n              {\n                index: data.index,\n                input: data.delta.partial_json,\n                type: data.delta.type,\n              },\n            ],\n        response_metadata,\n        additional_kwargs: {},\n        tool_call_chunks: [\n          {\n            index: data.index,\n            args: data.delta.partial_json,\n          },\n        ],\n      }),\n    };\n  } else if (\n    data.type === \"content_block_start\" &&\n    data.content_block.type === \"text\"\n  ) {\n    const content = data.content_block?.text;\n    if (content !== undefined) {\n      return {\n        chunk: new AIMessageChunk({\n          content: fields.coerceContentToString\n            ? content\n            : [\n                {\n                  index: data.index,\n                  ...data.content_block,\n                },\n              ],\n          response_metadata,\n          additional_kwargs: {},\n        }),\n      };\n    }\n  } else if (\n    data.type === \"content_block_start\" &&\n    data.content_block.type === \"redacted_thinking\"\n  ) {\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString\n          ? \"\"\n          : [{ index: data.index, ...data.content_block }],\n        response_metadata,\n      }),\n    };\n  } else if (\n    data.type === \"content_block_start\" &&\n    data.content_block.type === \"thinking\"\n  ) {\n    const content = data.content_block.thinking;\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString\n          ? content\n          : [{ index: data.index, ...data.content_block }],\n        response_metadata,\n      }),\n    };\n  }\n  return null;\n}\n\nexport function anthropicResponseToChatMessages(\n  messages: AnthropicMessageResponse[],\n  additionalKwargs: Record<string, unknown>\n): ChatGeneration[] {\n  const response_metadata = {\n    ...additionalKwargs,\n    model_provider: \"anthropic\",\n  };\n  const usage: Record<string, number> | null | undefined =\n    additionalKwargs.usage as Record<string, number> | null | undefined;\n  const usageMetadata =\n    usage != null\n      ? {\n          input_tokens: usage.input_tokens ?? 0,\n          output_tokens: usage.output_tokens ?? 0,\n          total_tokens: (usage.input_tokens ?? 0) + (usage.output_tokens ?? 0),\n          input_token_details: {\n            cache_creation: usage.cache_creation_input_tokens,\n            cache_read: usage.cache_read_input_tokens,\n          },\n        }\n      : undefined;\n  if (messages.length === 1 && messages[0].type === \"text\") {\n    return [\n      {\n        text: messages[0].text,\n        message: new AIMessage({\n          content: messages[0].text,\n          additional_kwargs: additionalKwargs,\n          usage_metadata: usageMetadata,\n          response_metadata,\n          id: additionalKwargs.id as string,\n        }),\n      },\n    ];\n  } else {\n    const toolCalls = extractToolCalls(messages);\n    const generations: ChatGeneration[] = [\n      {\n        text: \"\",\n        message: new AIMessage({\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          content: messages as any,\n          additional_kwargs: additionalKwargs,\n          tool_calls: toolCalls,\n          usage_metadata: usageMetadata,\n          response_metadata,\n          id: additionalKwargs.id as string,\n        }),\n      },\n    ];\n    return generations;\n  }\n}\n"],"mappings":"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"}