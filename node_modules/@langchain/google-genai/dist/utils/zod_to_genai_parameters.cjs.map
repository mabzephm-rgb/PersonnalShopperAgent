{"version":3,"file":"zod_to_genai_parameters.cjs","names":["obj: Record<string, any>","schema: InteropZodType<RunOutput> | JsonSchema7Type","schema: Record<string, any>"],"sources":["../../src/utils/zod_to_genai_parameters.ts"],"sourcesContent":["import {\n  type FunctionDeclarationSchema as GenerativeAIFunctionDeclarationSchema,\n  type SchemaType as FunctionDeclarationSchemaType,\n} from \"@google/generative-ai\";\nimport {\n  InteropZodType,\n  isInteropZodSchema,\n} from \"@langchain/core/utils/types\";\nimport {\n  type JsonSchema7Type,\n  toJsonSchema,\n} from \"@langchain/core/utils/json_schema\";\n\nexport interface GenerativeAIJsonSchema extends Record<string, unknown> {\n  properties?: Record<string, GenerativeAIJsonSchema>;\n  type: FunctionDeclarationSchemaType;\n}\n\nexport interface GenerativeAIJsonSchemaDirty extends GenerativeAIJsonSchema {\n  properties?: Record<string, GenerativeAIJsonSchemaDirty>;\n  additionalProperties?: boolean;\n}\n\nexport function removeAdditionalProperties(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  obj: Record<string, any>\n): GenerativeAIJsonSchema {\n  if (typeof obj === \"object\" && obj !== null) {\n    const newObj = { ...obj };\n\n    if (\"additionalProperties\" in newObj) {\n      delete newObj.additionalProperties;\n    }\n    if (\"$schema\" in newObj) {\n      delete newObj.$schema;\n    }\n    if (\"strict\" in newObj) {\n      delete newObj.strict;\n    }\n\n    for (const key in newObj) {\n      if (key in newObj) {\n        if (Array.isArray(newObj[key])) {\n          newObj[key] = newObj[key].map(removeAdditionalProperties);\n        } else if (typeof newObj[key] === \"object\" && newObj[key] !== null) {\n          newObj[key] = removeAdditionalProperties(newObj[key]);\n        }\n      }\n    }\n\n    return newObj as GenerativeAIJsonSchema;\n  }\n\n  return obj as GenerativeAIJsonSchema;\n}\n\nexport function schemaToGenerativeAIParameters<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  RunOutput extends Record<string, any> = Record<string, any>\n>(\n  schema: InteropZodType<RunOutput> | JsonSchema7Type\n): GenerativeAIFunctionDeclarationSchema {\n  // GenerativeAI doesn't accept either the $schema or additionalProperties\n  // attributes, so we need to explicitly remove them.\n  const jsonSchema = removeAdditionalProperties(\n    isInteropZodSchema(schema) ? toJsonSchema(schema) : schema\n  );\n  const { $schema, ...rest } = jsonSchema;\n\n  return rest as GenerativeAIFunctionDeclarationSchema;\n}\n\nexport function jsonSchemaToGeminiParameters(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  schema: Record<string, any>\n): GenerativeAIFunctionDeclarationSchema {\n  // Gemini doesn't accept either the $schema or additionalProperties\n  // attributes, so we need to explicitly remove them.\n  const jsonSchema = removeAdditionalProperties(\n    schema as GenerativeAIJsonSchemaDirty\n  );\n  const { $schema, ...rest } = jsonSchema;\n\n  return rest as GenerativeAIFunctionDeclarationSchema;\n}\n"],"mappings":";;;;;AAuBA,SAAgB,2BAEdA,KACwB;AACxB,KAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;EAC3C,MAAM,SAAS,EAAE,GAAG,IAAK;AAEzB,MAAI,0BAA0B,QAC5B,OAAO,OAAO;AAEhB,MAAI,aAAa,QACf,OAAO,OAAO;AAEhB,MAAI,YAAY,QACd,OAAO,OAAO;AAGhB,OAAK,MAAM,OAAO,OAChB,KAAI,OAAO,QACT;OAAI,MAAM,QAAQ,OAAO,KAAK,EAC5B,OAAO,OAAO,OAAO,KAAK,IAAI,2BAA2B;YAChD,OAAO,OAAO,SAAS,YAAY,OAAO,SAAS,MAC5D,OAAO,OAAO,2BAA2B,OAAO,KAAK;EACtD;AAIL,SAAO;CACR;AAED,QAAO;AACR;AAED,SAAgB,+BAIdC,QACuC;CAGvC,MAAM,aAAa,gFACE,OAAO,wDAAgB,OAAO,GAAG,OACrD;CACD,MAAM,EAAE,QAAS,GAAG,MAAM,GAAG;AAE7B,QAAO;AACR;AAED,SAAgB,6BAEdC,QACuC;CAGvC,MAAM,aAAa,2BACjB,OACD;CACD,MAAM,EAAE,QAAS,GAAG,MAAM,GAAG;AAE7B,QAAO;AACR"}